#define PROJECT "@PROJECT_NAME@"
#define VERSION "@PROJECT_VERSION@"
#define BUILD_TIME "@BUILD_TIME@"

/*
C99 标准支持可变参数宏的特性。
- … 表示变参列表，用 __VA_ARGS__ 表示前面的参数列表
- fmt 表示有一个固定参数，通常是一个格式化字符串
- ## 是宏连接符，在标识符 __VA_ARGS__ 前面加上宏连接符 ##，这样做的好处是，当变参列表 ... 为空时，它会将固定参数 fmt 后面的逗号删除掉，这样宏也就可以正常使用了。

例如：
#define pr_error(fmt, ...) printf("Error : " fmt , ##__VA_ARGS__)

pr_error("Invalid argument")  // "Invalid argument" 对应 fmt ，完整展开是  printf("Error : " "Invalid argument")
pr_error("%d: %s", errno, strerror(errno))  // "%d: %s" 对应 fmt ，后面的参数对应 __VA_ARGS__ ，完整展开是  printf("Error : " "%d: %s", errno, strerror(errno))

*/

#define pr_error(fmt, ...) printf("Error : " fmt , ##__VA_ARGS__)
#define pr_info(fmt, ...) printf("Info : " fmt , ##__VA_ARGS__)
/* 定义 __DEBUG__ 时，打印调试信息 */
#ifdef __DEBUG__
#define pr_debug(fmt, ...) printf("[%s:%04d]%s() : " fmt , __FILE__, __LINE__, __FUNCTION__, ##__VA_ARGS__)
#else
#define pr_debug(fmt, ...)
#endif